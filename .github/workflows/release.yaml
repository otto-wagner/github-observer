name: release

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description:  Version of the app being released. If this is empty, a default version will be deployed based on the Git SHA
        default: ""

env:
  WORKING_DIRECTORY: "."
  IMAGE_FILE: "Dockerfile"
  IMAGE_REGISTRY_BASE: ghcr.io
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  run-tests:
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    runs-on: ubuntu-latest
    steps:
      - name: GIT_CHECKOUT
        uses: actions/checkout@v5
      - name: SETUP_ENVIRONMENT
        uses: actions/setup-go@v6
        with:
          go-version: '1.22.4'
      - name: RUN_TESTS
        run: make test

  release-api:
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read # needed for reading the repo contents
      packages: write # needed for ghcr access

    steps:
      - name: GIT_CHECKOUT
        uses: actions/checkout@v5

      - name: DOCKER_SETUP_BUILDX
        uses: docker/setup-buildx-action@v3

      - name: DOCKER_SETUP_QEMU
        uses: docker/setup-qemu-action@v3

      - name: IMAGE_REGISTRY_LOGIN (${{ env.IMAGE_REGISTRY }})
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY_BASE }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: IMAGE_RELEASE_VERSION
        id: image-release
        uses: actions/github-script@v8
        with:
          script: |
            const version = "${{ github.event.inputs.release_version }}";
            if (version === "") {
              const versionDate = new Date();
              const versionSHA = "${{ github.sha }}".substring(0, 8);
              const versionGen = `v${versionDate.toISOString().split('T')[0].replaceAll("-", "")}-${versionSHA}`;
              core.setOutput('version', versionGen);
              return;
            }
            core.setOutput('version', version);

      - name: IMAGE_BUILD_PUSH
        uses: docker/build-push-action@v6
        with:
          context: "${{ env.WORKING_DIRECTORY }}"
          file: "${{ env.DOCKER_IMAGE_FILE }}"
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ${{ env.IMAGE_REGISTRY }}/github-observer:${{ steps.image-release.outputs.version }}
            ${{ env.IMAGE_REGISTRY }}/github-observer:latest
          build-args: |
            RELEASE_VERSION=${{ steps.image-release.outputs.version }}
          push: true
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.release_version }}
            org.opencontainers.image.version=${{ steps.image-release.outputs.version }}
            org.opencontainers.image.reversion=${{ github.sha }}
